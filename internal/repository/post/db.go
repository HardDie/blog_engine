// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package post

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createStmt, err = db.PrepareContext(ctx, create); err != nil {
		return nil, fmt.Errorf("error preparing query Create: %w", err)
	}
	if q.editStmt, err = db.PrepareContext(ctx, edit); err != nil {
		return nil, fmt.Errorf("error preparing query Edit: %w", err)
	}
	if q.getByIDStmt, err = db.PrepareContext(ctx, getByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetByID: %w", err)
	}
	if q.listStmt, err = db.PrepareContext(ctx, list); err != nil {
		return nil, fmt.Errorf("error preparing query List: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createStmt != nil {
		if cerr := q.createStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStmt: %w", cerr)
		}
	}
	if q.editStmt != nil {
		if cerr := q.editStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing editStmt: %w", cerr)
		}
	}
	if q.getByIDStmt != nil {
		if cerr := q.getByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getByIDStmt: %w", cerr)
		}
	}
	if q.listStmt != nil {
		if cerr := q.listStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db          DBTX
	tx          *sql.Tx
	createStmt  *sql.Stmt
	editStmt    *sql.Stmt
	getByIDStmt *sql.Stmt
	listStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:          tx,
		tx:          tx,
		createStmt:  q.createStmt,
		editStmt:    q.editStmt,
		getByIDStmt: q.getByIDStmt,
		listStmt:    q.listStmt,
	}
}
