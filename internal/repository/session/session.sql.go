// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: session.sql

package session

import (
	"context"
)

const createOrUpdate = `-- name: CreateOrUpdate :one
INSERT INTO sessions (user_id, session_hash)
VALUES (?, ?)
ON CONFLICT (user_id) DO UPDATE
SET session_hash = excluded.session_hash, updated_at = datetime('now'), deleted_at = NULL
RETURNING id, user_id, session_hash, created_at, updated_at, deleted_at
`

type CreateOrUpdateParams struct {
	UserID      int64  `json:"userId"`
	SessionHash string `json:"sessionHash"`
}

func (q *Queries) CreateOrUpdate(ctx context.Context, arg CreateOrUpdateParams) (*Session, error) {
	row := q.queryRow(ctx, q.createOrUpdateStmt, createOrUpdate, arg.UserID, arg.SessionHash)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const deleteByID = `-- name: DeleteByID :exec
UPDATE sessions
SET deleted_at = datetime('now')
WHERE id = ?
  AND deleted_at IS NULL
`

func (q *Queries) DeleteByID(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteByIDStmt, deleteByID, id)
	return err
}

const getByUserID = `-- name: GetByUserID :one
SELECT id, user_id, session_hash, created_at, updated_at, deleted_at
FROM sessions
WHERE session_hash = ?
  AND deleted_at IS NULL
`

func (q *Queries) GetByUserID(ctx context.Context, sessionHash string) (*Session, error) {
	row := q.queryRow(ctx, q.getByUserIDStmt, getByUserID, sessionHash)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
